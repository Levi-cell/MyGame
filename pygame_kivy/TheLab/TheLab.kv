CanvasExample7:                # MAIN INTERFACE , always change this part for your main widget, layout, etc that you wanna display

#--------------------------------------------------------------------------------------
# CANVAS
#---------------------------------------------------------------------------------------

#:set s dp(150)          # using this sintaxe "#:set" we can define a Variable inside the canvas

<CanvasExample1>:                   # attention that the sintaxe inside the canvas is diferente than the sintaxe inside the widget
    canvas:
        Rectangle:
            pos: self.center_x - s/2, self.center_y - s/2
            size: s, s
        Ellipse:
            pos: 200, 500
            size: s , s/2
        Line:
            points: (0, 0, self.width/4, 100, self.width/2, 0, self.width*3/4, 100, self.width, 0)
            width: 2

<CanvasExample2>
    canvas:
        Line:
            points: (0, self.height/2, self.width, self.height/2)
            width: 2
        Line:
            points: (self.width/2, 0, self.width/2, self.height)
            width: 2

<CanvasExample3>
    canvas:
        Color:
            rgba: 1, 0, 0, 1
        Line:
            circle: (200, 200, 100) # center_x, center_y, radius
            width: 2
        Line:
            ellipse: (500, 300, 100, 200) # center_x, center_y, radius_x, radius_y
            width: 2

        Color:
            rgba: 1, 1, 0, .5
        Line:
            rectangle: (700, 100, 300, 200) # x, y ,w h
            width: 2

<CanvasExample4>:
    Button:
        pos: 100, 400
        text: "Move Rect"
        on_press: root.on_button_a_click()

<CanvasExample5>:   # this exemple was made on python code direct

<CanvasExample6>:
    BoxLayout:
        size: root.size
        Widget:
            canvas:
                Color:
                    rgb: 0, 1, 0
                Rectangle:
                    size: self.size
        RelativeLayout:                 # RelativeLayout is the only one exemple that can realocate the layout inside the widget space
            canvas:
                Color:
                    rgb: 0, 0, 1
                Rectangle:
                    size: self.size

<CanvasExample7>:
    RelativeLayout:
        canvas:
            Color:
                rgb: 0, 0, 1
            Rectangle:
                size: self.size
    RelativeLayout:
        canvas:
            Color:
                rgb: 1, 1, 1
            Rectangle:
                size: self.size
    RelativeLayout:
        canvas:
            Color:
                rgb: 1, 0, 0
            Rectangle:
                size: self.size

# -------------------------------------------------------------------------------------
# WIDGETS
# -------------------------------------------------------------------------------------

<ImagesExample@GridLayout>:
    cols: 3
    Image:
        source: "images/cake.jpg"
    Image:
        source: "images/cake.jpg"
        allow_stretch: True
    Image:
        source: "images/cake.jpg"
        allow_stretch: True
        keep_ratio: False

<WidgetsExample>:
    cols: 3
    ToggleButton:
        text: "OFF"
        on_state: root.on_toggle_button_state(self) # here we pass the self of the func that we created on the code
        size_hint: None, 1                          # so this self do not refer to the WidgetExample
        width: "100dp"
    Button:
        text: "Count"
        on_press: root.on_button_click()  # pass the func created on the python and use root to give the path of the code
        disabled: not root.count_enabled  # we use not to start the button as OFF otherwise it will start the app already activated
    Label:
        text: root.my_text
        font_name: "fonts/Lcd.ttf"
        font_size: "80dp"
        color: 1, .5, 1, 1
    Switch:
        id: my_switch
        on_active: root.on_switch_active(self)
        size_hint: None, 1
        width: "100dp"
        active: True
    Slider:
        id: my_slider
        min: 0
        max: 100
        value: 50
        # on_value: root.on_slider_value(self)
        orientation: "vertical"
        disabled: not my_switch.active

    BoxLayout:
        orientation: "vertical"
        Label:
            text: str(int(my_slider.value))
        ProgressBar:
            max: 100
            min: 0
            value: my_slider.value

    TextInput:
        id: my_text_input
        size_hint: None, 1
        width: "100dp"
        text: "food"
        multiline: False
        on_text_validate: root.on_text_validate(self)
    Label:
        text: "Your name is: " + root.text_input_str


# ------------------------------------------------------------------------------------
# LAYOUTS EXEMPLES AND WIDGET
# ------------------------------------------------------------------------------------
<PageLayoutExample@PageLayout>:    # layout that works like  a book where we can "pass" the pages
    MainWidget:
    BoxLayoutExample:
    AnchorLayoutExample:
    GridLayoutExample:


<ScrollViewExample@ScrollView>:         # allow us to scroll down or sideways
    StackLayoutExample:
        size_hint: 1, None              # can be organised horizontal or vertical
        height: self.minimum_height     # allows us to size the height with the minimum height so it will adapt in the screen


<StackLayoutExample>:                   # stack them in the layout
    #left-right , top-bottom use always the initial letters
    #orientation: "rl-tb"
    padding: ("20dp"), ("20dp"), ("20dp"), ("20dp") # padding add a margin around our buttons
    spacing: "20dp", "20dp" # this give us a space between our buttons

    Button:
        text: "A"
        size_hint: .2, .2
    Button:
        text: "B"
        size_hint: .2, .2
    Button:
        text: "C"
        size_hint: .2, .2
    Button:
        text: "D"
        size_hint: .2, .2
    Button:
        text: "E"
        size_hint: .2, .2
    Button:
        text: "F"
        size_hint: .2, .2



<GridLayoutExample>:
<GridLayoutExample@GridLayout>: # this way we dont need to use python code, using direct the ky file for the layout
    # rows
    # cols

    #cols: 3
    rows: 2
    Button:
        text: "A"
        size_hint: None, .1

    BoxLayoutExample

    Button:
        text: "C"
    Button:
        text: "D"
        size_hint: None, .1

    Button:
        text: "E"
    Button:
        text: "F"



<AnchorLayoutExample>:
    # right, left, center
    anchor_x: "center"
    # bottom, top, center
    anchor_y: "top"
    BoxLayout:
        size_hint: .2, .2
        Button:
            text: "A"

        Button:
            text: "B"


<BoxLayoutExample>:
    # orientation: "vertical"
    Button:
        text: "A"
        # size : "40dp", "40dp"
        size_hint: .5, None
        # width: "100dp"
        height: "60dp"
        # x, center_x, right
        # y, center_y, top
        pos_hint: { "x" : .5}

    BoxLayout:
        orientation: "vertical"
        spacing: "10dp"
        Button:
            text: "B1"
        Button:
            text: "B2"
        Button:
            text: "B3"

    Label:
        text: "C"


<MainWidget>:
    Button:
        text: "Hello World"
        size : "40dp", "40dp"
        pos: "100dp", "200dp"
        color: 1,0,0,1

    Label:
        text: "Hello World"
        size : "100dp", "80dp"
        pos: "200dp", "300dp"
        color: 1,0,0,1